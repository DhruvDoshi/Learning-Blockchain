WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.660
Let's go back to the ERC-721 standard description and copy the interface definition.

00:00:08.869 --> 00:00:13.199
Now let's make a new file in our smart contract's directory in

00:00:13.199 --> 00:00:18.074
the contrast folder for the ERC721 interface that we just copied.

00:00:18.074 --> 00:00:21.539
We won't bother with the ERC165 requirement,

00:00:21.539 --> 00:00:24.820
so go ahead and delete any reference to that.

00:00:29.329 --> 00:00:36.189
Now, let's make another contract for ERC721 token implementation.

00:00:38.450 --> 00:00:42.230
We're also immediately going to make a test file for it in

00:00:42.229 --> 00:00:46.774
the test directory called ERC721TokenTest.js.

00:00:46.774 --> 00:00:49.939
I am going to split my screens that we have the interface in

00:00:49.939 --> 00:00:53.419
one side and our implementation of it on the other side.

00:00:53.420 --> 00:00:59.000
Now let's get started with implementing our ERC721 token contracts.

00:00:59.000 --> 00:01:03.789
Just like before, we'll need to specify the version of solidity that we'll be using.

00:01:03.789 --> 00:01:10.569
We can use the heritance and say that this contract is an ERC721 that we've made before.

00:01:14.959 --> 00:01:20.259
We'll need to import our ERC721 interface to make this work.

00:01:22.340 --> 00:01:26.510
Now we can start implementing the interface requirements.

00:01:26.510 --> 00:01:30.170
These are event types and they are already fully defined.

00:01:30.170 --> 00:01:32.060
All of these other functions however,

00:01:32.060 --> 00:01:33.620
we'll need to implement.

00:01:33.620 --> 00:01:37.040
Let's go ahead and copy them over to our implementation contract.

00:01:37.040 --> 00:01:41.705
We need to convert these interface function definitions into real functions.

00:01:41.704 --> 00:01:46.414
We can do that by replacing the semicolons at the end of functions with curly braces.

00:01:46.415 --> 00:01:48.430
For functions with the return type,

00:01:48.430 --> 00:01:52.205
we'll return a default value to get our contracts to compile.

00:01:52.204 --> 00:01:55.829
That way we'll unblock tree tests.

00:02:05.799 --> 00:02:11.359
Notice that none of these functions take the logic for how to create new tokens.

00:02:11.360 --> 00:02:12.920
So that's up to us.

00:02:12.919 --> 00:02:17.064
Let's make a main function that will enable us to make new tokens.

00:02:17.064 --> 00:02:18.405
For our main function,

00:02:18.405 --> 00:02:21.800
we'll take a token ID which is an unsigned integer.

00:02:21.800 --> 00:02:25.405
All a token is really is reference of ownership.

00:02:25.405 --> 00:02:28.129
The way we can do that here is to make a mapping,

00:02:28.129 --> 00:02:34.960
which is essentially a key value store to keep track of what address owns a token ID.

00:02:34.960 --> 00:02:40.150
We'll also make a mapping to hold the balance for each owner address.

00:02:46.520 --> 00:02:51.365
In solidity, the default value for everything is zero.

00:02:51.365 --> 00:02:56.525
So, to check that no one else owns the token ID for this given passing time int function,

00:02:56.525 --> 00:03:01.629
we'll require that the owner for that token is address zero.

00:03:02.900 --> 00:03:07.099
To assign ownership of a token ID to user,

00:03:07.099 --> 00:03:11.729
all we have to do is update our token to owner mapping.

00:03:16.960 --> 00:03:19.629
To update the user's balance,

00:03:19.629 --> 00:03:23.429
we have to update the owner to balance mapping.

00:03:27.849 --> 00:03:31.745
Let's also implement the balance of method.

00:03:31.745 --> 00:03:34.490
This method simply gives the balance or

00:03:34.490 --> 00:03:38.590
the amount of tokens for a given address or wallet.

00:03:38.590 --> 00:03:40.395
To get this information,

00:03:40.395 --> 00:03:46.835
we simply use our owner to balance mapping to get the balance given the owners address.

00:03:46.835 --> 00:03:53.719
Similarly, the owner of method gives the address of the owner of the given token ID,

00:03:53.719 --> 00:03:57.993
which we can get by using the token to owner mapping.

00:03:57.993 --> 00:04:01.219
Let's look over the three methods that we have

00:04:01.219 --> 00:04:04.780
implemented so far to make sure they look good.

00:04:04.780 --> 00:04:08.900
Asking balance of address zero doesn't actually make

00:04:08.900 --> 00:04:13.700
sense since all default values and solidity are zero.

00:04:13.699 --> 00:04:18.629
So, let's require that the address passed in is not that.

00:04:31.610 --> 00:04:36.259
Now let's make sure we adhere to the standards so far.

00:04:36.259 --> 00:04:42.264
We need to make sure that we emit the transfer event whenever we transfer a token.

00:04:42.264 --> 00:04:44.479
Since by emitting a token,

00:04:44.480 --> 00:04:47.150
we're transferring the ownership from the default

00:04:47.149 --> 00:04:50.509
address zero to the new owner's address,

00:04:50.509 --> 00:04:54.569
we should emit the transfer event on mint.

00:04:56.149 --> 00:05:00.039
Alright, we're ready to write some tests.

