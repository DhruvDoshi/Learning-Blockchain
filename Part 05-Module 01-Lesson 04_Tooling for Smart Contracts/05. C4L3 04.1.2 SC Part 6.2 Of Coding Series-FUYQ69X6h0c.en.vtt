WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.240
Just like before, we'll grab the definition of

00:00:03.240 --> 00:00:07.900
the contracts were testing from truffles artifact object.

00:00:11.869 --> 00:00:15.899
Just like before, we'll use the contract cured for

00:00:15.900 --> 00:00:20.835
our tests and passing the ten test accounts for us to use.

00:00:20.835 --> 00:00:26.210
The first out of the ten test accounts is the default account that will be

00:00:26.210 --> 00:00:31.539
used when no accounts is passed in to make a call to a smart contract.

00:00:31.539 --> 00:00:35.195
It's usually good to avoid using them for tests

00:00:35.195 --> 00:00:39.469
as it's passed in to certain calls without you realizing it.

00:00:39.469 --> 00:00:42.439
We'll use the subsequent test accounts to define

00:00:42.439 --> 00:00:46.349
to users and an operator that we'll use later.

00:00:54.530 --> 00:00:58.969
Since everything to do with the blockchain is in asynchronous action,

00:00:58.969 --> 00:01:02.869
we'll need to initialize our global contract variable for testing in

00:01:02.869 --> 00:01:07.489
an asynchronous before each function using the keyword "await."

00:01:07.489 --> 00:01:13.515
Let us group the test we'll write to test creating and token in the describe block.

00:01:13.515 --> 00:01:16.379
We'll try and create a token of Id1.

00:01:16.379 --> 00:01:18.239
So, to be organized,

00:01:18.239 --> 00:01:19.604
let's make a variable for that.

00:01:19.605 --> 00:01:25.170
For this group of tests,

00:01:25.170 --> 00:01:29.415
the first thing we'll do is mint the token of Id1 to user1.

00:01:29.415 --> 00:01:33.550
So, we can put that action and beforeEach function.

00:01:34.189 --> 00:01:42.009
Next, we can test that user1 is indeed the owner of Id1 using the owner of method.

00:01:50.209 --> 00:01:56.364
Similarly, we can test that the balance of user one also increased by one.

00:01:56.364 --> 00:01:58.689
Note that the variable we got back from

00:01:58.689 --> 00:02:03.905
the balanceOf method is a JavaScript representation of IQN-256,

00:02:03.905 --> 00:02:08.314
and is therefore represented as a big inch JavaScript object.

00:02:08.314 --> 00:02:11.634
In order for us to compare it to a JavaScript number,

00:02:11.634 --> 00:02:15.409
we'll have to call the two number method on it.

00:02:21.550 --> 00:02:27.505
Lastly, we'll want to test that the transfer event did indeed get emitted.

00:02:27.504 --> 00:02:33.664
To do that, we'll captured the transaction receipt beget when calling the mint function.

00:02:33.664 --> 00:02:35.894
And then it's gets stored as logs.

00:02:35.895 --> 00:02:38.360
So, we can get the transfer event from looking

00:02:38.360 --> 00:02:41.210
at the first law of the transaction receipt.

00:02:41.210 --> 00:02:47.270
Let's compare that the event name matches what we expect, transfer.

00:02:52.000 --> 00:02:54.979
We are ready to run our tests.

00:02:54.979 --> 00:03:00.049
Go back to the terminal and navigate to our working directory for smart contracts.

00:03:00.050 --> 00:03:04.615
Run the command "truffle test" followed by the test file.

00:03:04.615 --> 00:03:06.719
Let's see if our test pass.

00:03:06.719 --> 00:03:10.159
They do. Great. Let's keep going.

