WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.839
Next, we'll implement the transfer logic.

00:00:03.839 --> 00:00:07.799
The standard calls for three transfer from functions,

00:00:07.799 --> 00:00:10.919
also different, but for the same purpose.

00:00:10.919 --> 00:00:14.789
The safeTransferFrom functions are there to make sure that

00:00:14.789 --> 00:00:18.989
the token doesn't get transferred to a smart contract and gets stuck there.

00:00:18.989 --> 00:00:22.814
For example, remember our Hello World smart contract?

00:00:22.815 --> 00:00:25.710
We can transfer ownership of a token to it,

00:00:25.710 --> 00:00:28.950
but then that smart contract wouldn't know what to do with it,

00:00:28.949 --> 00:00:33.754
and that token would essentially be lost forever since you cannot reverse that action.

00:00:33.755 --> 00:00:35.915
For a real production project,

00:00:35.914 --> 00:00:39.924
you should definitely implement the safeTransferFrom functions.

00:00:39.924 --> 00:00:41.579
But for now we won't,

00:00:41.579 --> 00:00:45.570
and we'll just implement the one transfer form function instead.

00:00:45.570 --> 00:00:49.554
Let's go ahead and implement the transferFrom function.

00:00:49.554 --> 00:00:51.314
To transfer a token,

00:00:51.314 --> 00:00:54.784
all we have to do is update our internal mappings.

00:00:54.784 --> 00:01:00.179
The tokenToOwner mapping will now have a different owner for that token,

00:01:02.539 --> 00:01:08.159
and we'll have to decrement the balance mapping for the old owner.

00:01:10.909 --> 00:01:15.729
Like before, we'll have to emit the transfer events to log that

00:01:15.730 --> 00:01:21.230
that particular token changed ownership from old owner to a new one.

00:01:26.120 --> 00:01:30.730
We also have to make sure that whoever is calling this method has

00:01:30.730 --> 00:01:35.050
permission to transfer that token so no tokens gets stolen.

00:01:35.049 --> 00:01:39.515
We'll do that using a modifier function that will implement on top.

00:01:39.515 --> 00:01:43.435
We will require that the only way to transfer token for now

00:01:43.435 --> 00:01:47.905
is if the caller is the owner of the token that we're trying to transfer.

00:01:47.905 --> 00:01:50.890
If the call passes that require statement,

00:01:50.890 --> 00:01:54.070
we'll continue as denoted by the underscore.

00:01:54.069 --> 00:01:58.744
Now, we can take our modifier and apply to the transferFrom method,

00:01:58.745 --> 00:02:03.490
giving it the caller of the function and the token they're trying to transfer.

00:02:08.210 --> 00:02:12.169
Great! I think we're now ready for some tests.

00:02:12.169 --> 00:02:17.670
Let's make another describe block to group all the tests we do with transfer logic.

00:02:20.800 --> 00:02:23.420
In the beforeEach function,

00:02:23.419 --> 00:02:26.399
we'll mint a token to user1,

00:02:26.620 --> 00:02:32.640
and then have user1 transfer that same token to user2.

00:02:41.750 --> 00:02:49.308
Like before, we'll use the owner of method to check that the token now has a new owner.

00:02:49.308 --> 00:02:52.210
Like before, we'll also test that

00:02:52.210 --> 00:02:56.200
the transfer bench was emitted for the transfer transaction.

00:02:56.199 --> 00:03:01.739
This time, we'll also make sure that we're logging all the correct fields.

00:03:16.990 --> 00:03:21.480
Let's run our test to see if we can keep going.

00:03:22.909 --> 00:03:30.629
Great!

00:03:30.629 --> 00:03:33.509
Next step, we'll implement the approved method.

00:03:33.509 --> 00:03:39.530
This method allows the owner of a token to give another address approval to transfer it.

00:03:39.530 --> 00:03:41.419
This is useful, for example,

00:03:41.419 --> 00:03:43.280
when you are entrusting another user,

00:03:43.280 --> 00:03:47.485
exchange or a marketplace to do a transfer on your behalf.

00:03:47.485 --> 00:03:50.570
For this, we'll need a new mapping to keep track of

00:03:50.569 --> 00:03:54.329
what address is approved for a particular token.

00:03:58.340 --> 00:04:00.465
In our approved method,

00:04:00.465 --> 00:04:02.960
we'll simply update the mapping we just made to

00:04:02.960 --> 00:04:06.879
mark address as an approved address for this token.

00:04:06.879 --> 00:04:09.919
The only caller that is allowed to set

00:04:09.919 --> 00:04:13.159
an approval for a token is the owner for that token.

00:04:13.159 --> 00:04:15.979
So, we'll require that condition to be met,

00:04:15.979 --> 00:04:19.230
otherwise, the transaction fails.

00:04:22.600 --> 00:04:28.805
The standard also requires that we emit the approval event to log this action.

00:04:28.805 --> 00:04:35.215
This allows subscribers to these events know when a new approver for a token is assigned.

00:04:35.214 --> 00:04:37.974
To implement the getApproved method,

00:04:37.975 --> 00:04:43.230
all we have to do is return the value of that mapping for a particular tokenID.

00:04:43.230 --> 00:04:46.700
Let's go ahead and change the method signature from external,

00:04:46.699 --> 00:04:49.675
meaning that it has to be called outside of this contract,

00:04:49.675 --> 00:04:56.165
to public, so we can use it in our hasPermission modifier function we have on top.

00:04:56.165 --> 00:05:00.939
Now, we can say that if the caller is an approved caller for that token,

00:05:00.939 --> 00:05:05.550
that caller also has permission to transfer the token.

00:05:06.009 --> 00:05:08.464
Let's write some more tests,

00:05:08.464 --> 00:05:09.634
and just like before,

00:05:09.634 --> 00:05:14.360
we'll make a new describe block to test the approval behavior.

00:05:20.980 --> 00:05:27.189
I'll make a variable to keep the tokenID will be minting for the describe block.

00:05:27.189 --> 00:05:29.519
In the beforeEach function,

00:05:29.519 --> 00:05:33.149
will mint the token for user1 and have user1 give

00:05:33.149 --> 00:05:37.929
approval to user2 to transfer it at a later time.

00:05:41.089 --> 00:05:45.439
Now, we should be able to test that user2 is indeed

00:05:45.439 --> 00:05:50.069
at proved for that token by using the getApproved method.

00:05:53.240 --> 00:05:59.134
We can also test that since user2 now has permission to transfer token one,

00:05:59.134 --> 00:06:01.769
it should be able to do that.

00:06:04.339 --> 00:06:11.259
After the transfer, user2 should indeed be the new order for token one.

00:06:11.259 --> 00:06:16.115
We can also test the events emitted is the one we expect,

00:06:16.115 --> 00:06:18.870
which should be the approval event.

00:06:22.610 --> 00:06:25.545
Let's see if we're good in test so far,

00:06:25.545 --> 00:06:27.790
so we can keep going.

00:06:28.250 --> 00:06:31.839
Awesome! All our test passed.

