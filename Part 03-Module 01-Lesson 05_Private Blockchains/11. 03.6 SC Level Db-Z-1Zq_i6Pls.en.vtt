WEBVTT
Kind: captions
Language: en

00:00:00.420 --> 00:00:04.650
We created a simple blockchain where blocks are

00:00:04.650 --> 00:00:08.970
stringed together utilizing SHA256 hashes.

00:00:08.970 --> 00:00:14.075
I modified our code to include additional comments, it's best practice.

00:00:14.074 --> 00:00:17.759
I wanted to take time to prepare you for some challenges ahead.

00:00:17.760 --> 00:00:20.980
One of those challenges is persisting the dataset.

00:00:20.980 --> 00:00:22.234
At this point in time,

00:00:22.234 --> 00:00:25.605
your blockchain remains a memory with the chain array.

00:00:25.605 --> 00:00:28.310
Upon restart of your node project,

00:00:28.309 --> 00:00:32.710
the data state does not persist. Let me show you.

00:00:44.649 --> 00:00:52.179
Let's navigate back to our terminal session to install level using Node Package Manager.

00:00:52.179 --> 00:00:55.975
So, we're going to type in npm for Node Package Manager,

00:00:55.975 --> 00:01:01.490
install, level is our package dependency for this project,

00:01:01.490 --> 00:01:06.290
and then we want to go ahead and do --save for our flag to

00:01:06.290 --> 00:01:12.530
save this package dependency within our package.json project file.

00:01:14.060 --> 00:01:17.930
Great. We have LevelDB-wrapper installed.

00:01:17.930 --> 00:01:24.265
A prepared levelSandbox.js which is located as a resource for you to review.

00:01:24.265 --> 00:01:28.950
Let's walk through it. We need and not require our project dependency called level.

00:01:28.950 --> 00:01:33.140
Next, we establish our storage location for the dataset,

00:01:33.140 --> 00:01:38.394
and then we could figure db as an object to reference to level

00:01:38.394 --> 00:01:43.840
with our chainDB which is the location of our dataset.

00:01:43.840 --> 00:01:50.400
We created a new function to add data to LevelDB with a key value pair.

00:01:50.400 --> 00:01:57.340
Our next function, we get data from LevelDB utilizing the key,

00:01:57.340 --> 00:02:04.255
and finally we addDataToLevelDB utilizing a value.

00:02:04.254 --> 00:02:08.669
This is a helpful function that loops through the key value dataset

00:02:08.669 --> 00:02:14.939
utilizing the createReadStream on data that loops through,

00:02:14.939 --> 00:02:17.495
and once in the loop has closed,

00:02:17.495 --> 00:02:24.965
it adds data utilizing the addLevelDBData function with the key and the data's value.

00:02:24.965 --> 00:02:27.849
We can test using a self-invoking function.

00:02:27.849 --> 00:02:30.840
I created one here as an example.

00:02:30.840 --> 00:02:33.849
The self-invoking function has been defined as theLoop.

00:02:33.849 --> 00:02:38.824
We have a timeout configured that set for 100 milliseconds.

00:02:38.824 --> 00:02:42.159
This loops for 10 times.

00:02:42.159 --> 00:02:43.784
Feel free to test.

00:02:43.784 --> 00:02:46.439
Test by copying your code,

00:02:46.439 --> 00:02:51.210
going back into a node environment, pasting your code,

00:02:51.210 --> 00:02:54.305
and sure enough, new blocks were added,

00:02:54.305 --> 00:02:56.230
and then on the left-hand side,

00:02:56.229 --> 00:03:00.469
we have our chaindata where our dataset is being stored.

00:03:00.469 --> 00:03:05.590
To recap, we went through simple.js and we just added some comments to our code.

00:03:05.590 --> 00:03:10.189
Next, we've went through levelSandbox.js.

00:03:10.189 --> 00:03:15.189
LevelSandbox.js is just one means of expressing

00:03:15.189 --> 00:03:20.729
the power of LevelDB as a key value data store to persist our data state.

